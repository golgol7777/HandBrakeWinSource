@anchor{xcode}
@chapter Building via Xcode.app

@c %**-------------------------------------------------------------------------
@anchor{xcode.checkout}
@section Checkout Sources
@include building/method.checkout.texi

@c %**-------------------------------------------------------------------------
@anchor{xcode.build}
@section Build
Open Xcode.app from a terminal by using the @command{open} command which passes your shell environment and its @samp{PATH} setting to Xcode. Do not attempt to launch Xcode.app from Finder or by using Finder to open @file{HandBrake.xcodeproj} -- doing so will defeat any custom path settings which contain required tools.

@example
open @file{macosx/HandBrake.xcodeproj}
@end example

Once the HandBrake Xcode project is open, perform the following steps to build the default configuration:

@itemize
@item select active configuration @b{standard}
@item select active target @b{HandBrake}
@item click @b{Build} or @b{Build and Go}
@end itemize

When using Build and Go, xcode launches the application under the gdb debugger.  gdb will encounter a trap when starting the program.  This trap is harmless and you should just 'continue'.  For the curious, the trap occurs because we add some values to the environment with setenv, then do a brain transplant with execv. Restarting the application with execv triggers the trap.

The first build (on an empty @file{build} directory) will take a bit of time. You may use the Build Results window to observe progress. The most time-consuming part of the build is when the external build system (essentially the @b{terminal} method) is triggered by Xcode and a substantial amount of log transcript ensues. Much of that transcript are warnings and errors that are part of the normal build process for 3rd-party contributed modules so in general you need not do anything. However, if Xcode itself reports the build failed, then you must take corrective action.

Unfortunately, due to limitations of Xcode we do not have hooks in place to offer finer-grained control over per-module make actions for the (external) build system. Thus, you will have to use @b{terminal} to accomplish those tasks. Just @command{cd} into the build directory which is associated with your active configuration and perform any necessary @command{make} commands. @b{Be careful not to issue commands from the terminal simultaneously with Xcode tasks} as that will confuse both Xcode and make and likely corrupt your build directory.

When you click @b{clean} in Xcode it will not perform an external build clean. Basically @b{HandBrakeCLI} and @b{HandBrake.app} are the only products which have full Xcode iterative development flexibility.

Each configuration uses a different @file{build} directory. This makes it possible to build each configuration and switch between them without losing their respective build state. The description of each configuration and the name convention for build directories are as follows:

@table @samp
@item standard
This configuration will build @b{host native} architecture. Build directory is @file{build.standard} .
The standard variant produces optimized code without debug information.

@item standard.i386
This configuration will build @b{i386} architecture. Build directory is @file{build.standard.i386} .

@item standard.x86_64
This configuration will build @b{x86_64} architecture. Build directory is @file{build.standard.x86_64} .

@item standard.ppc
This configuration will build @b{ppc} architecture. Build directory is @file{build.standard.ppc} .

@item standard.ppc64
This configuration will build @b{ppc64} architecture. Build directory is @file{build.standard.ppc64} .

@item debug
This configuration will build @b{host native architecture}. Build directory is @file{build.debug} .
The debug variant produces unoptimized code with debug information.

@item debug.i386
This configuration will build @b{i386} architecture. Build directory is @file{build.debug.i386} .
The debug variant produces unoptimized code with debug information.

@item debug.x86_64
This configuration will build @b{x86_64} architecture. Build directory is @file{build.debug.x86_64} .
The debug variant produces unoptimized code with debug information.

@item debug.ppc
This configuration will build @b{ppc} architecture. Build directory is @file{build.debug.ppc} .
The debug variant produces unoptimized code with debug information.

@item debug.ppc64
This configuration will build @b{ppc64} architecture. Build directory is @file{build.debug.ppc64} .
The debug variant produces unoptimized code with debug information.
@end table

@c %**-------------------------------------------------------------------------
@anchor{xcode.extenal}
@section External Targets
The following external targets appear in the Xcode project and perform @b{build} and @b{clean} actions.

@table @samp
@item external
Target maps to @command{make build} and @command{make clean} for everything Xcode products depend upon from the external build system.

@item libhb
Target maps to @command{make libhb.build} and @command{make libhb.clean}.

@item contrib
Target maps to @command{make contrib.build} and @command{make contrib.xclean}.

@end table

@c %**-------------------------------------------------------------------------
@anchor{xcode.userdefined}
@section User-Defined Settings
The following user defined settings are used in Xcode project for the external build system:

@table @samp
@item EXTERNAL_BUILD
Specifies the build (scratch) directory for each configuration.

@item EXTERNAL_JOBS
Specifies the concurrency factor for the external build system when builds are launched from within Xcode.
Modify for faster external builds if your system has the horsepower and resources. Specifying a value greater than the number of CPU cores (or virtual cores) in your system is unlikely to produce gains and will needlessly consume extra resources.

@item EXTERNAL_METHOD
Do not modify; Used for internal/external build coordination and must always be @samp{xcode}.

@item EXTERNAL_SRC
Specifies the top-level source directory for @value{HB.name}.

@end table
